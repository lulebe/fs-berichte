{% extends "app/appbase.twig" %}

{% block title %}Eintragen{% endblock %}
{% block head %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.css">
<script src="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.js"></script>
{% endblock %}

{% block content %}
  <div class="wrapper" v-scope>
    <div>
      <h1>Protokoll anlegen</h1>
      <form action="" method="POST" onsubmit="return validateForm()">
        <input type="hidden" name="examType" value="{{examType.id}}">
        <div class="card mb">
          <small>Prüfungsdatum</small><br>
          <input type="date" name="date" required value="{{currentDate}}"><br><br>
          <div class="inputlabel">
            <label id="locationLabel">Prüfungsort (Klinik oder Institut)</label>
            <input type="hidden" name="locationId">
            <input type="hidden" name="location" class="requiredInvisible" data-label="locationLabel">
            <br>
            <span id="locationDisplay"></span>
            <button type="button" class="iconbtn small" onclick="pickLocation()"><i class="material-icons">edit</i> Ort wählen</button>
          </div><br>
          <div class="inputlabel">
            <label>Prüflinge insgesamt</label>
            <input type="number" accept="0-9" inputmode="numeric" name="studentCount" required min="1" max="10" step="1" value="2">
          </div><br>
          <div class="inputlabel">
            <label>Note (bei Bedarf freilassen)</label>
            <input type="text" name="grade" placeholder="noch nicht bekannt">
          </div><br>
          <div class="inputlabel">
            <label>Allgemeines</label>
            <textarea name="comment" id="reportGeneralInput">Atmosphäre, allgemeine Tipps, alles drumherum...</textarea>
          </div>
        </div>
        
        <button onclick="createSubject()" class="iconbtn" id="addSubjectBtn"><i class="material-icons">add</i> weiteres Fach</button>
        <button type="submit" class="fullpagesubmit" id="submitFormBtn">eintragen</button>
      </form>
    </div>
    <div style="height: 64px">&nbsp;</div>
  </div>

<div class="modal pickerModal" id="locationPicker">
  <div class="modalwrapper">
    <div class="modalcontent" onclick="event.stopPropagation()">
      <h2>Ort auswählen</h2>
      <section class="page page1">
        <input type="text" autocomplete="off" class="modalPage1Input" placeholder="Uniklinikum">
        <div class="listcontainer"><ul class="suggestionsList striped"></ul></div>
        <span style="text-align: right;"><a href="#" class="notFoundLink">Ort nicht gefunden?</a></span>
      </section>
      <section class="page page2">
        Einen neuen Ort anlegen:
        <div class="inputlabel">
          <label>Ort</label>
          <input type="text" class="modalPage2Input" placeholder="Dorfklinik Kleinbüttwart">
        </div>
      </section>
      <div class="modalbtns">
        <button type="button" class="secondary modalCancelBtn">abbrechen</button>
        <div style="flex-grow: 1"></div>
        <button type="button" class="confirmNewBtn">übernehmen</button>
      </div>
    </div>
  </div>
</div>

<div class="modal pickerModal" id="examinerPicker">
  <div class="modalwrapper">
    <div class="modalcontent" onclick="event.stopPropagation()">
      <h2>Prüfer auswählen</h2>
      <section class="page page1">
        <input type="text" autocomplete="off" class="modalPage1Input" placeholder="Joachim Kirsch">
        <div class="listcontainer"><ul class="suggestionsList striped"></ul></div>
        <span style="text-align: right;"><a href="#" class="notFoundLink">Prüfer nicht gefunden?</a></span>
      </section>
      <section class="page page2">
        Einen neuen Prüfer anlegen:
        <small>(keine Titel angeben)</small>
        <div class="inputlabel">
          <label>Vorname</label>
          <input type="text" class="modalPage2Input" placeholder="Joachim">
        </div>
        <div class="inputlabel">
          <label>Nachname</label>
          <input type="text" class="modalPage2Input" placeholder="Kirsch">
        </div>
      </section>
      <div class="modalbtns">
        <button type="button" class="secondary modalCancelBtn">abbrechen</button>
        <div style="flex-grow: 1"></div>
        <button type="button" class="confirmNewBtn">übernehmen</button>
      </div>
    </div>
  </div>
</div>

<div class="modal pickerModal" id="subjectPicker">
  <div class="modalwrapper">
    <div class="modalcontent" onclick="event.stopPropagation()">
      <h2>Fach auswählen</h2>
      <section class="page page1">
        <input type="text" autocomplete="off" class="modalPage1Input" placeholder="Weltraummedizin">
        <div class="listcontainer"><ul class="suggestionsList striped"></ul></div>
        <span style="text-align: right;"><a href="#" class="notFoundLink">Fach nicht gefunden?</a></span>
      </section>
      <section class="page page2">
        Ein neues Fach anlegen:
        <div class="inputlabel">
          <label>Name</label>
          <input type="text" class="modalPage2Input" placeholder="Weltraummedizin">
        </div>
      </section>
      <div class="modalbtns">
        <button type="button" class="secondary modalCancelBtn">abbrechen</button>
        <div style="flex-grow: 1"></div>
        <button type="button" class="confirmNewBtn">übernehmen</button>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block js %}
<script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.min.js"></script>
<script src="/assets/pickfromdbmodals.js"></script>
<script type="text/javascript">
  let subjectIndex = 0
  const easyMDE0 = new EasyMDE({
    element: document.getElementById('reportGeneralInput'),
    spellChecker: false,
    toolbar: [
      "bold", "italic", "heading", "|",
      "link", "unordered-list", "ordered-list", "|",
      "preview", "side-by-side", "fullscreen", "|",
      "undo", "redo", "|",
      "guide"
      ],
    autosave: {
      enabled: false,
      uniqueId: "reportInput0"
    }
  })

  createSubject()

  function createSubject () {
    const addBtn = document.getElementById('addSubjectBtn')
    const el = document.createElement('div')
    el.innerHTML = createSubjectFromTemplate(subjectIndex)
    el.classList.add('card', 'mb')
    el.id = 'subjectCard'+subjectIndex
    el.dataset.subjectindex = subjectIndex
    addBtn.parentElement.insertBefore(el, addBtn)
    const editor = new EasyMDE({
      element: document.getElementById('reportInput'+subjectIndex),
      spellChecker: false,
      toolbar: [
        "bold", "italic", "heading", "|",
        "link", "unordered-list", "ordered-list", "|",
        "preview", "side-by-side", "fullscreen", "|",
        "undo", "redo", "|",
        "guide"
        ],
      autosave: {
        enabled: false
      }
    })
    validateForm()
    subjectIndex++
  }

  function deleteSubject (btn) {
    const index = parseInt(btn.parentElement.dataset.subjectindex)
    if (!confirm('Bericht über Fach ' + (index+1) + ' wirklich entfernen?')) return
    subjectIndex--
    const el = document.getElementById('subjectCard'+index)
    el.remove()
    for (let i = index+1; i <= subjectIndex; i++) {
      const el = document.getElementById('subjectCard'+i)
      el.id = 'subjectCard' + (i-1)
      el.dataset.subjectindex = i-1
      document.getElementById('subjectLabel'+i).id = 'subjectLabel' + (i-1)
      document.getElementById('subjectDisplay'+i).id = 'subjectDisplay' + (i-1)
      document.getElementById('examinerLabel'+i).id = 'examinerLabel' + (i-1)
      document.getElementById('examinerDisplay'+i).id = 'examinerDisplay' + (i-1)
      document.getElementById('reportInput'+i).id = 'reportInput' + (i-1)
      document.getElementsByName('subjectId'+i)[0].name = 'subjectId' + (i-1)
      document.getElementsByName('subject'+i)[0].dataset.label = 'subjectLabel' + (i-1)
      document.getElementsByName('subject'+i)[0].name = 'subject' + (i-1)
      document.getElementsByName('examinerId'+i)[0].name = 'examinerId' + (i-1)
      document.getElementsByName('examiner'+i)[0].dataset.label = 'examinerLabel' + (i-1)
      document.getElementsByName('examiner'+i)[0].name = 'examiner' + (i-1)
      document.getElementsByName('report'+i)[0].name = 'report' + (i-1)
      el.getElementsByTagName('h3')[0].textContent = 'Fach ' + (i)
    }
    validateForm()
  }

  function createSubjectFromTemplate (subjectIndex) {
    return `
        <h3>Fach ${subjectIndex + 1}</h3><br>
        <div class="inputlabel">
          <label id="subjectLabel${subjectIndex}">Fach</label>
          <input type="hidden" name="subjectId${subjectIndex}">
          <input type="hidden" name="subject${subjectIndex}" class="requiredInvisible" data-label="subjectLabel${subjectIndex}">
          <br>
          <span id="subjectDisplay${subjectIndex}"></span>
          <button type="button" class="iconbtn small" onclick="pickSubject(this)"><i class="material-icons">edit</i> Fach wählen</button>
        </div><br>
        <div class="inputlabel">
          <label id="examinerLabel${subjectIndex}">Prüfer (ganzer Name, ohne Titel)</label>
          <input type="hidden" name="examinerId${subjectIndex}">
          <input type="hidden" name="examiner${subjectIndex}" class="requiredInvisible" data-label="examinerLabel${subjectIndex}">
          <br>
          <span id="examinerDisplay${subjectIndex}"></span>
          <button type="button" class="iconbtn small" onclick="pickExaminer(this)"><i class="material-icons">edit</i> Prüfer wählen</button>
        </div><br>
        <small>Bericht</small>
        <textarea name="report${subjectIndex}" id="reportInput${subjectIndex}" required minlength="30">Es begab sich eines schönen Sommertages, ...</textarea>
        <button class="small iconbtn important" onclick="deleteSubject(this)"><i class="material-icons">delete</i> Fach entfernen</button>
    `
  }

  atData = {
    examiner: new Fuse({{examiners | json_encode() | raw}}, {keys: ['name']}),
    subject: new Fuse({{subjects | json_encode() | raw}}, {keys: ['name']}),
    location: new Fuse({{locations | json_encode() | raw}}, {keys: ['name']})
  }
  validateForm()

  function validateForm () {
    let valid = true
    const fields = document.querySelectorAll('.requiredInvisible')
    for (let i = 0; i < fields.length; i++) {
      const element = fields[i]
      if (element.value.length < 3) {
        valid = false
        document.getElementById(element.dataset.label).classList.add('error')
      }
    }
    document.getElementById('submitFormBtn').disabled = !valid
    return valid
  }

  function pickLocation () {
    new ModalHandler(document.getElementById('locationPicker'), atData.location, (id, name) => {
      document.getElementsByName('locationId')[0].value = id
      document.getElementsByName('location')[0].value = name
      document.getElementById('locationDisplay').textContent = name
      document.getElementById(document.getElementsByName('location')[0].dataset.label).classList.remove('error')
      validateForm()
    })
  }
  function pickExaminer (el) {
    const n = parseInt(el.parentElement.parentElement.dataset.subjectindex)
    new ModalHandler(document.getElementById('examinerPicker'), atData.examiner, (id, name) => {
      document.getElementsByName('examinerId'+n)[0].value = id
      document.getElementsByName('examiner'+n)[0].value = name
      document.getElementById('examinerDisplay'+n).textContent = name
      document.getElementById(document.getElementsByName('examiner'+n)[0].dataset.label).classList.remove('error')
      validateForm()
    })
  }
  function pickSubject (el) {
    const n = parseInt(el.parentElement.parentElement.dataset.subjectindex)
    new ModalHandler(document.getElementById('subjectPicker'), atData.subject, (id, name) => {
      document.getElementsByName('subjectId'+n)[0].value = id
      document.getElementsByName('subject'+n)[0].value = name
      document.getElementById('subjectDisplay'+n).textContent = name
      document.getElementById(document.getElementsByName('subject'+n)[0].dataset.label).classList.remove('error')
      validateForm()
    })
  }
  
</script>
{% endblock %}